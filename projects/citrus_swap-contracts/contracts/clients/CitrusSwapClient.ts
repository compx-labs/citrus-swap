/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CitrusSwap","desc":"","methods":[{"name":"creatApplication","args":[{"name":"adminAddress","type":"address"},{"name":"treasuryAddress","type":"address"},{"name":"asset1Id","type":"uint64"},{"name":"asset2Id","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"initApplication","args":[{"name":"payTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":2,"ints":7},"local":{"bytes":0,"ints":0}},"keys":{"global":{"asset1Id":{"key":"YXNzZXQxSWQ=","keyType":"AVMBytes","valueType":"uint64"},"asset2Id":{"key":"YXNzZXQySWQ=","keyType":"AVMBytes","valueType":"uint64"},"lpAssetId":{"key":"bHBBc3NldElk","keyType":"AVMBytes","valueType":"uint64"},"asset1Reserve":{"key":"YXNzZXQxUmVzZXJ2ZQ==","keyType":"AVMBytes","valueType":"uint64"},"asset2Reserve":{"key":"YXNzZXQyUmVzZXJ2ZQ==","keyType":"AVMBytes","valueType":"uint64"},"totalAsset1":{"key":"dG90YWxBc3NldDE=","keyType":"AVMBytes","valueType":"uint64"},"totalAsset2":{"key":"dG90YWxBc3NldDI=","keyType":"AVMBytes","valueType":"uint64"},"adminAddress":{"key":"YWRtaW5BZGRyZXNz","keyType":"AVMBytes","valueType":"address"},"treasuryAddress":{"key":"dHJlYXN1cnlBZGRyZXNz","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/CitrusSwap.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts/CitrusSwap.algo.ts:3","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/CitrusSwap.algo.ts:3","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},{"teal":15,"source":"contracts/CitrusSwap.algo.ts:3","pc":[27,28]},{"teal":16,"source":"contracts/CitrusSwap.algo.ts:3","pc":[29]},{"teal":17,"source":"contracts/CitrusSwap.algo.ts:3","pc":[30,31]},{"teal":18,"source":"contracts/CitrusSwap.algo.ts:3","pc":[32]},{"teal":19,"source":"contracts/CitrusSwap.algo.ts:3","pc":[33,34]},{"teal":20,"source":"contracts/CitrusSwap.algo.ts:3","pc":[35]},{"teal":21,"source":"contracts/CitrusSwap.algo.ts:3","pc":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61]},{"teal":25,"source":"contracts/CitrusSwap.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[62]},{"teal":30,"source":"contracts/CitrusSwap.algo.ts:26","pc":[63,64,65]},{"teal":31,"source":"contracts/CitrusSwap.algo.ts:26","pc":[66]},{"teal":34,"source":"contracts/CitrusSwap.algo.ts:26","pc":[67,68,69]},{"teal":35,"source":"contracts/CitrusSwap.algo.ts:26","pc":[70]},{"teal":38,"source":"contracts/CitrusSwap.algo.ts:26","pc":[71,72,73]},{"teal":39,"source":"contracts/CitrusSwap.algo.ts:26","pc":[74]},{"teal":40,"source":"contracts/CitrusSwap.algo.ts:26","pc":[75]},{"teal":41,"source":"contracts/CitrusSwap.algo.ts:26","pc":[76]},{"teal":42,"source":"contracts/CitrusSwap.algo.ts:26","pc":[77]},{"teal":45,"source":"contracts/CitrusSwap.algo.ts:26","errorMessage":"argument 2 (treasuryAddress) for creatApplication must be a address","pc":[78]},{"teal":48,"source":"contracts/CitrusSwap.algo.ts:26","pc":[79,80,81]},{"teal":49,"source":"contracts/CitrusSwap.algo.ts:26","pc":[82]},{"teal":50,"source":"contracts/CitrusSwap.algo.ts:26","pc":[83]},{"teal":51,"source":"contracts/CitrusSwap.algo.ts:26","pc":[84]},{"teal":52,"source":"contracts/CitrusSwap.algo.ts:26","pc":[85]},{"teal":55,"source":"contracts/CitrusSwap.algo.ts:26","errorMessage":"argument 3 (adminAddress) for creatApplication must be a address","pc":[86]},{"teal":58,"source":"contracts/CitrusSwap.algo.ts:26","pc":[87,88,89]},{"teal":59,"source":"contracts/CitrusSwap.algo.ts:26","pc":[90]},{"teal":60,"source":"contracts/CitrusSwap.algo.ts:26","pc":[91]},{"teal":64,"source":"contracts/CitrusSwap.algo.ts:26","pc":[92,93,94]},{"teal":68,"source":"contracts/CitrusSwap.algo.ts:27","pc":[95,96,97,98,99,100,101,102,103,104,105,106,107,108]},{"teal":69,"source":"contracts/CitrusSwap.algo.ts:27","pc":[109,110]},{"teal":70,"source":"contracts/CitrusSwap.algo.ts:27","pc":[111]},{"teal":74,"source":"contracts/CitrusSwap.algo.ts:28","pc":[112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]},{"teal":75,"source":"contracts/CitrusSwap.algo.ts:28","pc":[129,130]},{"teal":76,"source":"contracts/CitrusSwap.algo.ts:28","pc":[131]},{"teal":80,"source":"contracts/CitrusSwap.algo.ts:29","pc":[132]},{"teal":81,"source":"contracts/CitrusSwap.algo.ts:29","pc":[133,134]},{"teal":82,"source":"contracts/CitrusSwap.algo.ts:29","pc":[135]},{"teal":86,"source":"contracts/CitrusSwap.algo.ts:30","pc":[136]},{"teal":87,"source":"contracts/CitrusSwap.algo.ts:30","pc":[137,138]},{"teal":88,"source":"contracts/CitrusSwap.algo.ts:30","pc":[139]},{"teal":92,"source":"contracts/CitrusSwap.algo.ts:31","pc":[140,141,142,143,144,145,146,147,148,149,150,151,152,153,154]},{"teal":93,"source":"contracts/CitrusSwap.algo.ts:31","pc":[155]},{"teal":94,"source":"contracts/CitrusSwap.algo.ts:31","pc":[156]},{"teal":98,"source":"contracts/CitrusSwap.algo.ts:32","pc":[157,158,159,160,161,162,163,164,165,166,167,168,169,170,171]},{"teal":99,"source":"contracts/CitrusSwap.algo.ts:32","pc":[172]},{"teal":100,"source":"contracts/CitrusSwap.algo.ts:32","pc":[173]},{"teal":104,"source":"contracts/CitrusSwap.algo.ts:33","pc":[174,175,176,177,178,179,180,181,182,183,184,185,186]},{"teal":105,"source":"contracts/CitrusSwap.algo.ts:33","pc":[187]},{"teal":106,"source":"contracts/CitrusSwap.algo.ts:33","pc":[188]},{"teal":110,"source":"contracts/CitrusSwap.algo.ts:34","pc":[189,190,191,192,193,194,195,196,197,198,199,200,201]},{"teal":111,"source":"contracts/CitrusSwap.algo.ts:34","pc":[202]},{"teal":112,"source":"contracts/CitrusSwap.algo.ts:34","pc":[203]},{"teal":113,"source":"contracts/CitrusSwap.algo.ts:26","pc":[204]},{"teal":118,"source":"contracts/CitrusSwap.algo.ts:37","pc":[205,206]},{"teal":119,"source":"contracts/CitrusSwap.algo.ts:37","pc":[207]},{"teal":120,"source":"contracts/CitrusSwap.algo.ts:37","pc":[208]},{"teal":121,"source":"contracts/CitrusSwap.algo.ts:37","pc":[209]},{"teal":122,"source":"contracts/CitrusSwap.algo.ts:37","pc":[210,211]},{"teal":123,"source":"contracts/CitrusSwap.algo.ts:37","pc":[212]},{"teal":124,"source":"contracts/CitrusSwap.algo.ts:37","pc":[213]},{"teal":127,"source":"contracts/CitrusSwap.algo.ts:37","errorMessage":"argument 0 (payTxn) for initApplication must be a pay transaction","pc":[214]},{"teal":130,"source":"contracts/CitrusSwap.algo.ts:37","pc":[215,216,217]},{"teal":131,"source":"contracts/CitrusSwap.algo.ts:37","pc":[218]},{"teal":132,"source":"contracts/CitrusSwap.algo.ts:37","pc":[219]},{"teal":136,"source":"contracts/CitrusSwap.algo.ts:37","pc":[220,221,222]},{"teal":141,"source":"contracts/CitrusSwap.algo.ts:38","pc":[223,224]},{"teal":142,"source":"contracts/CitrusSwap.algo.ts:38","pc":[225,226]},{"teal":143,"source":"contracts/CitrusSwap.algo.ts:38","pc":[227,228]},{"teal":144,"source":"contracts/CitrusSwap.algo.ts:38","pc":[229]},{"teal":147,"source":"contracts/CitrusSwap.algo.ts:38","errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[230]},{"teal":150,"source":"contracts/CitrusSwap.algo.ts:38","pc":[231,232]},{"teal":151,"source":"contracts/CitrusSwap.algo.ts:38","pc":[233,234]},{"teal":152,"source":"contracts/CitrusSwap.algo.ts:38","pc":[235,236,237,238]},{"teal":153,"source":"contracts/CitrusSwap.algo.ts:38","pc":[239]},{"teal":156,"source":"contracts/CitrusSwap.algo.ts:38","errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"300_000\"}","pc":[240]},{"teal":164,"source":"contracts/CitrusSwap.algo.ts:39","pc":[241]},{"teal":165,"source":"contracts/CitrusSwap.algo.ts:39","pc":[242]},{"teal":166,"source":"contracts/CitrusSwap.algo.ts:39","pc":[243,244]},{"teal":170,"source":"contracts/CitrusSwap.algo.ts:40","pc":[245]},{"teal":171,"source":"contracts/CitrusSwap.algo.ts:40","pc":[246]},{"teal":172,"source":"contracts/CitrusSwap.algo.ts:40","pc":[247,248]},{"teal":176,"source":"contracts/CitrusSwap.algo.ts:41","pc":[249,250]},{"teal":177,"source":"contracts/CitrusSwap.algo.ts:41","pc":[251,252]},{"teal":181,"source":"contracts/CitrusSwap.algo.ts:42","pc":[253]},{"teal":182,"source":"contracts/CitrusSwap.algo.ts:42","pc":[254,255]},{"teal":185,"source":"contracts/CitrusSwap.algo.ts:39","pc":[256]},{"teal":186,"source":"contracts/CitrusSwap.algo.ts:39","pc":[257,258]},{"teal":189,"source":"contracts/CitrusSwap.algo.ts:39","pc":[259]},{"teal":197,"source":"contracts/CitrusSwap.algo.ts:44","pc":[260]},{"teal":198,"source":"contracts/CitrusSwap.algo.ts:44","pc":[261]},{"teal":199,"source":"contracts/CitrusSwap.algo.ts:44","pc":[262,263]},{"teal":203,"source":"contracts/CitrusSwap.algo.ts:45","pc":[264]},{"teal":204,"source":"contracts/CitrusSwap.algo.ts:45","pc":[265]},{"teal":205,"source":"contracts/CitrusSwap.algo.ts:45","pc":[266,267]},{"teal":209,"source":"contracts/CitrusSwap.algo.ts:46","pc":[268,269]},{"teal":210,"source":"contracts/CitrusSwap.algo.ts:46","pc":[270,271]},{"teal":214,"source":"contracts/CitrusSwap.algo.ts:47","pc":[272]},{"teal":215,"source":"contracts/CitrusSwap.algo.ts:47","pc":[273,274]},{"teal":218,"source":"contracts/CitrusSwap.algo.ts:44","pc":[275]},{"teal":219,"source":"contracts/CitrusSwap.algo.ts:44","pc":[276,277]},{"teal":222,"source":"contracts/CitrusSwap.algo.ts:44","pc":[278]},{"teal":223,"source":"contracts/CitrusSwap.algo.ts:37","pc":[279]},{"teal":228,"source":"contracts/CitrusSwap.algo.ts:51","pc":[280,281,282]},{"teal":229,"source":"contracts/CitrusSwap.algo.ts:51","pc":[283]},{"teal":230,"source":"contracts/CitrusSwap.algo.ts:51","pc":[284]},{"teal":234,"source":"contracts/CitrusSwap.algo.ts:51","pc":[285,286,287]},{"teal":235,"source":"contracts/CitrusSwap.algo.ts:51","pc":[288]},{"teal":238,"source":"contracts/CitrusSwap.algo.ts:3","pc":[289]},{"teal":239,"source":"contracts/CitrusSwap.algo.ts:3","pc":[290]},{"teal":242,"source":"contracts/CitrusSwap.algo.ts:3","pc":[291,292,293,294,295,296]},{"teal":243,"source":"contracts/CitrusSwap.algo.ts:3","pc":[297,298,299]},{"teal":244,"source":"contracts/CitrusSwap.algo.ts:3","pc":[300,301,302,303]},{"teal":247,"source":"contracts/CitrusSwap.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[304]},{"teal":250,"source":"contracts/CitrusSwap.algo.ts:3","pc":[305,306,307,308,309,310]},{"teal":251,"source":"contracts/CitrusSwap.algo.ts:3","pc":[311,312,313,314,315,316]},{"teal":252,"source":"contracts/CitrusSwap.algo.ts:3","pc":[317,318,319,320,321,322]},{"teal":253,"source":"contracts/CitrusSwap.algo.ts:3","pc":[323,324,325]},{"teal":254,"source":"contracts/CitrusSwap.algo.ts:3","pc":[326,327,328,329,330,331,332,333]},{"teal":257,"source":"contracts/CitrusSwap.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[334]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAAEEICYCCGFzc2V0MUlkCGFzc2V0MklkMRgUgQYLMRkIjQwA8wAAAAAAAAAAAAAA5QAAAAAAAAAAAAAANhoEFzYaAxc2GgJJFSUSRDYaAUkVJRJEiAACI0OKBACADGFkbWluQWRkcmVzc4v/Z4APdHJlYXN1cnlBZGRyZXNzi/5nKIv9ZymL/GeADWFzc2V0MVJlc2VydmUiZ4ANYXNzZXQyUmVzZXJ2ZSJngAt0b3RhbEFzc2V0MSJngAt0b3RhbEFzc2V0MiJniTEWIwlJOBAjEkSIAAIjQ4oBAIv/OAcyChJEi/84CIHgpxISRLEkshAoZLIRMgqyFCKyEiKyAbOxJLIQKWSyETIKshQishIisgGziYgAAiNDigAAiSNDgAS4RHs2NhoAjgH/8QCABJ10hQCABPknqfaABDFyyp02GgCOA/7x/3//ygA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CitrusSwap contract
 */
export type CitrusSwapArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'creatApplication(address,address,uint64,uint64)void': {
      adminAddress: string
      treasuryAddress: string
      asset1Id: bigint | number
      asset2Id: bigint | number
    }
    'initApplication(pay)void': {
      payTxn: AppMethodCallTransactionArgument
    }
    'gas()void': Record<string, never>
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'creatApplication(address,address,uint64,uint64)void': [adminAddress: string, treasuryAddress: string, asset1Id: bigint | number, asset2Id: bigint | number]
    'initApplication(pay)void': [payTxn: AppMethodCallTransactionArgument]
    'gas()void': []
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type CitrusSwapReturns = {
  'creatApplication(address,address,uint64,uint64)void': void
  'initApplication(pay)void': void
  'gas()void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the CitrusSwap smart contract.
 */
export type CitrusSwapTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'creatApplication(address,address,uint64,uint64)void' | 'creatApplication', {
      argsObj: CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void']
      argsTuple: CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']
      returns: CitrusSwapReturns['creatApplication(address,address,uint64,uint64)void']
    }>
    & Record<'initApplication(pay)void' | 'initApplication', {
      argsObj: CitrusSwapArgs['obj']['initApplication(pay)void']
      argsTuple: CitrusSwapArgs['tuple']['initApplication(pay)void']
      returns: CitrusSwapReturns['initApplication(pay)void']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: CitrusSwapArgs['obj']['gas()void']
      argsTuple: CitrusSwapArgs['tuple']['gas()void']
      returns: CitrusSwapReturns['gas()void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CitrusSwapArgs['obj']['createApplication()void']
      argsTuple: CitrusSwapArgs['tuple']['createApplication()void']
      returns: CitrusSwapReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        asset1Id: bigint
        asset2Id: bigint
        lpAssetId: bigint
        asset1Reserve: bigint
        asset2Reserve: bigint
        totalAsset1: bigint
        totalAsset2: bigint
        adminAddress: string
        treasuryAddress: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CitrusSwapSignatures = keyof CitrusSwapTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CitrusSwapNonVoidMethodSignatures = keyof CitrusSwapTypes['methods'] extends infer T ? T extends keyof CitrusSwapTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CitrusSwap smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CitrusSwapSignatures> = CitrusSwapTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CitrusSwap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CitrusSwapSignatures> = CitrusSwapTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CitrusSwapTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CitrusSwapCreateCallParams =
  | Expand<CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CitrusSwapDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CitrusSwapCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CitrusSwap smart contract
 */
export abstract class CitrusSwapParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CitrusSwapCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CitrusSwapParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CitrusSwap smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the creatApplication(address,address,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static creatApplication(params: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'creatApplication(address,address,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminAddress, params.args.treasuryAddress, params.args.asset1Id, params.args.asset2Id],
    }
  }
  /**
   * Constructs a no op call for the initApplication(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CitrusSwap smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CitrusSwapFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CitrusSwapFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CitrusSwapClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CitrusSwapClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CitrusSwap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CitrusSwapDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CitrusSwapParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CitrusSwapCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CitrusSwapClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitrusSwap smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CitrusSwapParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitrusSwap smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CitrusSwapParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CitrusSwap smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CitrusSwapArgs['obj']['createApplication()void'] | CitrusSwapArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CitrusSwapParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CitrusSwapReturns['createApplication()void']) }, appClient: new CitrusSwapClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CitrusSwap smart contract
 */
export class CitrusSwapClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CitrusSwapClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CitrusSwap app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CitrusSwapClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CitrusSwapNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CitrusSwapClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CitrusSwapClient> {
    return new CitrusSwapClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CitrusSwapClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CitrusSwapClient> {
    return new CitrusSwapClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CitrusSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `creatApplication(address,address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    creatApplication: (params: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitrusSwapParamsFactory.creatApplication(params))
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CitrusSwapParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CitrusSwapParamsFactory.gas(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CitrusSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `creatApplication(address,address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    creatApplication: (params: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitrusSwapParamsFactory.creatApplication(params))
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CitrusSwapParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CitrusSwapParamsFactory.gas(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CitrusSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `creatApplication(address,address,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    creatApplication: async (params: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitrusSwapParamsFactory.creatApplication(params))
      return {...result, return: result.return as unknown as (undefined | CitrusSwapReturns['creatApplication(address,address,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `initApplication(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CitrusSwapParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | CitrusSwapReturns['initApplication(pay)void'])}
    },

    /**
     * Makes a call to the CitrusSwap smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CitrusSwapParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | CitrusSwapReturns['gas()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CitrusSwapClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CitrusSwap app
   */
  state = {
    /**
     * Methods to access global state for the current CitrusSwap app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asset1Id: result.asset1Id,
          asset2Id: result.asset2Id,
          lpAssetId: result.lpAssetId,
          asset1Reserve: result.asset1Reserve,
          asset2Reserve: result.asset2Reserve,
          totalAsset1: result.totalAsset1,
          totalAsset2: result.totalAsset2,
          adminAddress: result.adminAddress,
          treasuryAddress: result.treasuryAddress,
        }
      },
      /**
       * Get the current value of the asset1Id key in global state
       */
      asset1Id: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset1Id")) as bigint | undefined },
      /**
       * Get the current value of the asset2Id key in global state
       */
      asset2Id: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset2Id")) as bigint | undefined },
      /**
       * Get the current value of the lpAssetId key in global state
       */
      lpAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lpAssetId")) as bigint | undefined },
      /**
       * Get the current value of the asset1Reserve key in global state
       */
      asset1Reserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset1Reserve")) as bigint | undefined },
      /**
       * Get the current value of the asset2Reserve key in global state
       */
      asset2Reserve: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset2Reserve")) as bigint | undefined },
      /**
       * Get the current value of the totalAsset1 key in global state
       */
      totalAsset1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAsset1")) as bigint | undefined },
      /**
       * Get the current value of the totalAsset2 key in global state
       */
      totalAsset2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAsset2")) as bigint | undefined },
      /**
       * Get the current value of the adminAddress key in global state
       */
      adminAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("adminAddress")) as string | undefined },
      /**
       * Get the current value of the treasuryAddress key in global state
       */
      treasuryAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasuryAddress")) as string | undefined },
    },
  }

  public newGroup(): CitrusSwapComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a creatApplication(address,address,uint64,uint64)void method call against the CitrusSwap contract
       */
      creatApplication(params: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.creatApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initApplication(pay)void method call against the CitrusSwap contract
       */
      initApplication(params: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a gas()void method call against the CitrusSwap contract
       */
      gas(params: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the CitrusSwap contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CitrusSwapComposer
  }
}
export type CitrusSwapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the creatApplication(address,address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  creatApplication(params?: CallParams<CitrusSwapArgs['obj']['creatApplication(address,address,uint64,uint64)void'] | CitrusSwapArgs['tuple']['creatApplication(address,address,uint64,uint64)void']>): CitrusSwapComposer<[...TReturns, CitrusSwapReturns['creatApplication(address,address,uint64,uint64)void'] | undefined]>

  /**
   * Calls the initApplication(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<CitrusSwapArgs['obj']['initApplication(pay)void'] | CitrusSwapArgs['tuple']['initApplication(pay)void']>): CitrusSwapComposer<[...TReturns, CitrusSwapReturns['initApplication(pay)void'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<CitrusSwapArgs['obj']['gas()void'] | CitrusSwapArgs['tuple']['gas()void']>): CitrusSwapComposer<[...TReturns, CitrusSwapReturns['gas()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CitrusSwap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CitrusSwapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CitrusSwapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CitrusSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CitrusSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CitrusSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CitrusSwapComposerResults<TReturns>>
}
export type CitrusSwapComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

